import type { ButtonBinding, ButtonsDef, Cursor, GamepadButton, GamepadDef, GamepadStick, Key, KGamePad, MouseButton } from "./types";
import { Vec2 } from "./math";
import { EventController, EventHandler } from "./utils";
export declare class ButtonState<T = string> {
    pressed: Set<T>;
    pressedRepeat: Set<T>;
    released: Set<T>;
    down: Set<T>;
    update(): void;
    press(btn: T): void;
    pressRepeat(btn: T): void;
    release(btn: T): void;
}
declare const _default: (opt: {
    canvas: HTMLCanvasElement;
    touchToMouse?: boolean;
    gamepads?: Record<string, GamepadDef>;
    pixelDensity?: number;
    maxFPS?: number;
    buttons?: ButtonsDef;
}) => {
    dt: () => number;
    time: () => number;
    run: (action: () => void) => void;
    canvas: HTMLCanvasElement;
    fps: () => number;
    numFrames: () => number;
    quit: () => void;
    isHidden: () => boolean;
    setFullscreen: (f?: boolean) => void;
    isFullscreen: () => boolean;
    setCursor: (c: Cursor) => void;
    screenshot: () => string;
    getGamepads: () => KGamePad[];
    getCursor: () => Cursor;
    setCursorLocked: (b: boolean) => void;
    isCursorLocked: () => boolean;
    isTouchscreen: () => boolean;
    mousePos: () => Vec2;
    mouseDeltaPos: () => Vec2;
    isKeyDown: (k?: Key | Key[]) => boolean;
    isKeyPressed: (k?: Key | Key[]) => boolean;
    isKeyPressedRepeat: (k?: Key | Key[]) => boolean;
    isKeyReleased: (k?: Key | Key[]) => boolean;
    isMouseDown: (m?: MouseButton) => boolean;
    isMousePressed: (m?: MouseButton) => boolean;
    isMouseReleased: (m?: MouseButton) => boolean;
    isMouseMoved: () => boolean;
    isGamepadButtonPressed: (btn?: GamepadButton | GamepadButton[]) => boolean;
    isGamepadButtonDown: (btn?: GamepadButton | GamepadButton[]) => boolean;
    isGamepadButtonReleased: (btn?: GamepadButton | GamepadButton[]) => boolean;
    getGamepadStick: (stick: GamepadStick) => Vec2;
    isButtonPressed: (btn?: string | string[]) => boolean;
    isButtonDown: (btn?: string | string[]) => boolean;
    isButtonReleased: (btn?: string | string[]) => boolean;
    setButton: (btn: string, binding: ButtonBinding) => void;
    getButton: (btn: string) => ButtonBinding;
    charInputted: () => string[];
    onResize: (action: () => void) => EventController;
    onKeyDown: ((action: (key: Key) => void) => EventController) & ((key: Key | Key[], action: (key: Key) => void) => EventController);
    onKeyPress: ((action: (key: Key) => void) => EventController) & ((key: Key | Key[], action: (key: Key) => void) => EventController);
    onKeyPressRepeat: ((action: (key: Key) => void) => EventController) & ((key: Key | Key[], action: (key: Key) => void) => EventController);
    onKeyRelease: ((action: (key: Key) => void) => EventController) & ((key: Key | Key[], action: (key: Key) => void) => EventController);
    onMouseDown: ((action: (m: MouseButton) => void) => EventController) & ((mouse: MouseButton | MouseButton[], action: (m: MouseButton) => void) => EventController);
    onMousePress: ((action: (m: MouseButton) => void) => EventController) & ((mouse: MouseButton | MouseButton[], action: (m: MouseButton) => void) => EventController);
    onMouseRelease: ((action: (m: MouseButton) => void) => EventController) & ((mouse: MouseButton | MouseButton[], action: (m: MouseButton) => void) => EventController);
    onMouseMove: (f: (pos: Vec2, dpos: Vec2) => void) => EventController;
    onCharInput: (action: (ch: string) => void) => EventController;
    onTouchStart: (f: (pos: Vec2, t: Touch) => void) => EventController;
    onTouchMove: (f: (pos: Vec2, t: Touch) => void) => EventController;
    onTouchEnd: (f: (pos: Vec2, t: Touch) => void) => EventController;
    onScroll: (action: (delta: Vec2) => void) => EventController;
    onHide: (action: () => void) => EventController;
    onShow: (action: () => void) => EventController;
    onGamepadButtonDown: ((action: (btn: GamepadButton) => void) => EventController) & ((btn: GamepadButton, action: (btn: GamepadButton) => void) => EventController);
    onGamepadButtonPress: ((action: (btn: GamepadButton) => void) => EventController) & ((btn: GamepadButton | GamepadButton[], action: (btn: GamepadButton) => void) => EventController);
    onGamepadButtonRelease: ((action: (btn: GamepadButton) => void) => EventController) & ((btn: GamepadButton | GamepadButton[], action: (btn: GamepadButton) => void) => EventController);
    onGamepadStick: (stick: GamepadStick, action: (value: Vec2) => void) => EventController;
    onGamepadConnect: (action: (gamepad: KGamePad) => void) => void;
    onGamepadDisconnect: (action: (gamepad: KGamePad) => void) => void;
    onButtonPress: ((action: (btn: string) => void) => EventController) & ((btn: string | string, action: (btn: string) => void) => EventController);
    onButtonDown: ((action: (btn: string) => void) => EventController) & ((btn: string | string, action: (btn: string) => void) => EventController);
    onButtonRelease: ((action: (btn: string) => void) => EventController) & ((btn: string | string, action: (btn: string) => void) => EventController);
    events: EventHandler<{
        mouseMove: [];
        mouseDown: [MouseButton];
        mousePress: [MouseButton];
        mouseRelease: [MouseButton];
        charInput: [string];
        keyPress: [Key];
        keyDown: [Key];
        keyPressRepeat: [Key];
        keyRelease: [Key];
        touchStart: [Vec2, Touch];
        touchMove: [Vec2, Touch];
        touchEnd: [Vec2, Touch];
        gamepadButtonDown: [GamepadButton];
        gamepadButtonPress: [GamepadButton];
        gamepadButtonRelease: [GamepadButton];
        gamepadStick: [string, Vec2];
        gamepadConnect: [KGamePad];
        gamepadDisconnect: [KGamePad];
        buttonDown: [string];
        buttonPress: [string];
        buttonRelease: [string];
        scroll: [Vec2];
        hide: [];
        show: [];
        resize: [];
        input: [];
    }>;
};
export default _default;
//# sourceMappingURL=app.d.ts.map